.lds-ellipsis.svelte-17w1k0l.svelte-17w1k0l{display:inline-block;position:relative;width:60px}.lds-ellipsis.svelte-17w1k0l div.svelte-17w1k0l{position:absolute;border-radius:50%;background:var(--bg-color);-webkit-animation-timing-function:cubic-bezier(0,1,1,0);animation-timing-function:cubic-bezier(0,1,1,0)}.lds-ellipsis.svelte-17w1k0l div.svelte-17w1k0l:first-child{-webkit-animation:svelte-17w1k0l-lds-ellipsis1 .6s infinite;animation:svelte-17w1k0l-lds-ellipsis1 .6s infinite}.lds-ellipsis.svelte-17w1k0l div.svelte-17w1k0l:nth-child(2),.lds-ellipsis.svelte-17w1k0l div.svelte-17w1k0l:nth-child(3){-webkit-animation:svelte-17w1k0l-lds-ellipsis2 .6s infinite;animation:svelte-17w1k0l-lds-ellipsis2 .6s infinite}.lds-ellipsis.svelte-17w1k0l div.svelte-17w1k0l:nth-child(4){-webkit-animation:svelte-17w1k0l-lds-ellipsis3 .6s infinite;animation:svelte-17w1k0l-lds-ellipsis3 .6s infinite}@-webkit-keyframes svelte-17w1k0l-lds-ellipsis1{0%{transform:scale(0)}to{transform:scale(1)}}@keyframes svelte-17w1k0l-lds-ellipsis1{0%{transform:scale(0)}to{transform:scale(1)}}@-webkit-keyframes svelte-17w1k0l-lds-ellipsis3{0%{transform:scale(1)}to{transform:scale(0)}}@keyframes svelte-17w1k0l-lds-ellipsis3{0%{transform:scale(1)}to{transform:scale(0)}}@-webkit-keyframes svelte-17w1k0l-lds-ellipsis2{0%{transform:translate(0)}to{transform:translate(var(--t-size))}}@keyframes svelte-17w1k0l-lds-ellipsis2{0%{transform:translate(0)}to{transform:translate(var(--t-size))}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NMaW5lLnN2ZWx0ZSIsInNvdXJjZXMiOlsiUHJvZ3Jlc3NMaW5lLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gICAgZXhwb3J0IGxldCBkb3RTaXplID0gMTM7XHJcbiAgICBleHBvcnQgbGV0IGxlZnRTaXplID0gODtcclxuICAgIGV4cG9ydCBsZXQgYmdDb2xvciA9IFwiI2EwYWVjMFwiO1xyXG48L3NjcmlwdD5cclxuXHJcbjxkaXYgY2xhc3M9XCJ3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cclxuICAgIDxkaXZcclxuICAgICAgICBjbGFzcz1cImxkcy1lbGxpcHNpc1wiXHJcbiAgICAgICAgc3R5bGU9XCIgLS10LXNpemU6IHtsZWZ0U2l6ZSAqIDMgKyAncHgnfTstLWJnLWNvbG9yOntiZ0NvbG9yfVwiXHJcbiAgICA+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBzdHlsZT1cIiAgIHdpZHRoOiB7ZG90U2l6ZX1weDtcclxuICAgICAgICBoZWlnaHQ6ICB7ZG90U2l6ZX1weDsgXHJcbiAgICAgICAgbGVmdDoge2xlZnRTaXplfXB4O1xyXG4gICAgICAgIFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHN0eWxlPVwiICAgXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiB7ZG90U2l6ZX1weDtcclxuICAgICAgICBoZWlnaHQ6ICB7ZG90U2l6ZX1weDsgICAgICBcclxuICAgICAgICBsZWZ0OiAge2xlZnRTaXplfXB4O1xyXG4gICAgICAgIFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHN0eWxlPVwiICAgd2lkdGg6IHtkb3RTaXplfXB4O1xyXG4gICAgICAgIGhlaWdodDogIHtkb3RTaXplfXB4O1xyXG4gICAgICAgIGxlZnQ6ICB7bGVmdFNpemUgKlxyXG4gICAgICAgICAgICAgICAgNH1weDtcclxuICAgICAgICBcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBzdHlsZT1cIiAgIHdpZHRoOiB7ZG90U2l6ZX1weDtcclxuICAgICAgICBoZWlnaHQ6ICB7ZG90U2l6ZX1weDtcclxuICAgICAgICBsZWZ0OiAge2xlZnRTaXplICpcclxuICAgICAgICAgICAgICAgIDd9cHg7XHJcbiAgICAgICAgXCJcclxuICAgICAgICAvPlxyXG4gICAgPC9kaXY+XHJcbjwvZGl2PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJwb3N0Y3NzXCI+Lmxkcy1lbGxpcHNpc3tkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo2MHB4fS5sZHMtZWxsaXBzaXMgZGl2e3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6dmFyKC0tYmctY29sb3IpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMCwxLDEsMCk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMCwxLDEsMCl9Lmxkcy1lbGxpcHNpcyBkaXY6Zmlyc3QtY2hpbGR7LXdlYmtpdC1hbmltYXRpb246bGRzLWVsbGlwc2lzMSAuNnMgaW5maW5pdGU7YW5pbWF0aW9uOmxkcy1lbGxpcHNpczEgLjZzIGluZmluaXRlfS5sZHMtZWxsaXBzaXMgZGl2Om50aC1jaGlsZCgyKSwubGRzLWVsbGlwc2lzIGRpdjpudGgtY2hpbGQoMyl7LXdlYmtpdC1hbmltYXRpb246bGRzLWVsbGlwc2lzMiAuNnMgaW5maW5pdGU7YW5pbWF0aW9uOmxkcy1lbGxpcHNpczIgLjZzIGluZmluaXRlfS5sZHMtZWxsaXBzaXMgZGl2Om50aC1jaGlsZCg0KXstd2Via2l0LWFuaW1hdGlvbjpsZHMtZWxsaXBzaXMzIC42cyBpbmZpbml0ZTthbmltYXRpb246bGRzLWVsbGlwc2lzMyAuNnMgaW5maW5pdGV9QC13ZWJraXQta2V5ZnJhbWVzIGxkcy1lbGxpcHNpczF7MCV7dHJhbnNmb3JtOnNjYWxlKDApfXRve3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBsZHMtZWxsaXBzaXMxezAle3RyYW5zZm9ybTpzY2FsZSgwKX10b3t0cmFuc2Zvcm06c2NhbGUoMSl9fUAtd2Via2l0LWtleWZyYW1lcyBsZHMtZWxsaXBzaXMzezAle3RyYW5zZm9ybTpzY2FsZSgxKX10b3t0cmFuc2Zvcm06c2NhbGUoMCl9fUBrZXlmcmFtZXMgbGRzLWVsbGlwc2lzM3swJXt0cmFuc2Zvcm06c2NhbGUoMSl9dG97dHJhbnNmb3JtOnNjYWxlKDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgbGRzLWVsbGlwc2lzMnswJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDApfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tdC1zaXplKSl9fUBrZXlmcmFtZXMgbGRzLWVsbGlwc2lzMnswJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDApfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tdC1zaXplKSl9fVxuPC9zdHlsZT5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBDc0IsMkNBQWEsQ0FBQyxRQUFRLFlBQVksQ0FBQyxTQUFTLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyw0QkFBYSxDQUFDLGtCQUFHLENBQUMsU0FBUyxRQUFRLENBQUMsY0FBYyxHQUFHLENBQUMsV0FBVyxJQUFJLFVBQVUsQ0FBQyxDQUFDLGtDQUFrQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDRCQUFhLENBQUMsa0JBQUcsWUFBWSxDQUFDLGtCQUFrQiw0QkFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSw0QkFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsNEJBQWEsQ0FBQyxrQkFBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLDRCQUFhLENBQUMsa0JBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsNEJBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsNEJBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLDRCQUFhLENBQUMsa0JBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsNEJBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsNEJBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQiw0QkFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsNEJBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsNEJBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLDRCQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLDRCQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxVQUFVLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsNEJBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLFVBQVUsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMifQ== */
.bu-op.svelte-12shzq{width:100%;display:flex;align-items:center;justify-content:flex-start;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;padding:1rem;outline:2px solid transparent;outline-offset:2px}.svelte-12shzq::-webkit-scrollbar{width:0!important}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */

/*# sourceMappingURL=components.css.map */