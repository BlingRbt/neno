{
  "version": 3,
  "file": "components.css",
  "sources": [
    "..\\Editor.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { onMount } from \"svelte\";\r\n    let editor = \"\";\r\n    import { afterUpdate, tick } from \"svelte\";\r\n\r\n    afterUpdate(async () => {\r\n        // await tick();\r\n        // editor.focus();\r\n    });\r\n    onMount(() => {\r\n        // editor.focus();\r\n        // let selection = getSelection();\r\n        // console.log(selection, selection.focusNode.length);\r\n        // selection.setPosition(selection.focusNode, selection.focusNode.length);\r\n    });\r\n\r\n    let lastEditRange;\r\n    let eContent = ``;\r\n    let bolding = false;\r\n    $: {\r\n        console.log(eContent);\r\n    }\r\n    function get1LevelNodePosition(selection) {\r\n        let cNode = selection.focusNode;\r\n        if (cNode == null || cNode.id == \"msgInputContainer\") {\r\n            console.log(\"return \", \"null\");\r\n\r\n            return null;\r\n        }\r\n        if (cNode.type) {\r\n        }\r\n        while (true) {\r\n            if (cNode.parentNode.id == \"msgInputContainer\") {\r\n                console.log(\"return \", cNode, cNode.nextElementSibling);\r\n                return { node: cNode, nextnode: cNode.nextElementSibling };\r\n            } else {\r\n                cNode = cNode.parentNode;\r\n            }\r\n        }\r\n    }\r\n    function hashtag(params) {}\r\n    async function listcheck(params) {\r\n        editor.focus();\r\n        let selection = getSelection();\r\n        console.log(\"selection\", selection);\r\n        //判断当前属于div,ol,还是ul\r\n        let inNode = get1LevelNodePosition(selection);\r\n        if (inNode == null || inNode.nextnode == null) {\r\n            addli(null);\r\n        } else if (inNode.node.nodeName == \"OL\") {\r\n            //将有序列表变成普通列表\r\n            let selection = getSelection();\r\n            let cNode = selection.focusNode;\r\n            let targetNode = \"\";\r\n            //获得光标所在的li\r\n            while (true) {\r\n                if (cNode.nodeName == \"LI\") {\r\n                    targetNode = cNode;\r\n                    break;\r\n                } else {\r\n                    cNode = cNode.parentNode;\r\n                }\r\n            }\r\n            let targetIndex = 0;\r\n            let geted = false;\r\n            let newNode = document.createElement(\"div\");\r\n            let newNextNode = document.createElement(\"ol\");\r\n            newNextNode.className = \"list-decimal list-inside\";\r\n\r\n            //获得光标所在的li的位置\r\n            for (let index = 0; index < inNode.node.children.length; index++) {\r\n                const element = inNode.node.children[index];\r\n                if (element.isSameNode(targetNode)) {\r\n                    targetIndex = index;\r\n                    geted = true;\r\n                    let a = targetNode.childNodes.length;\r\n                    for (let i = 0; i < a; i++) {\r\n                        let elementaa = targetNode.childNodes[i].cloneNode(\r\n                            true\r\n                        );\r\n                        newNode.appendChild(elementaa);\r\n                    }\r\n                    editor.insertBefore(newNode, inNode.nextnode);\r\n                    continue;\r\n                }\r\n                if (geted) {\r\n                    newNextNode.appendChild(element.cloneNode(true));\r\n                }\r\n            }\r\n            console.log(\"newNextNode\", newNextNode);\r\n            inNode.node.removeChild(targetNode);\r\n            if (inNode.node.childNodes.length == 0) {\r\n                //如果移除后ol内为空,移除这个空的ol\r\n                editor.removeChild(inNode.node);\r\n            } else {\r\n                //移除目标节点后面的li\r\n                let a = newNextNode.childNodes.length;\r\n                for (let i = 0; i < a; i++) {\r\n                    inNode.node.removeChild(inNode.node.lastChild);\r\n                }\r\n            }\r\n            //将目标节点后面的li集中到新的ol中并插入\r\n            editor.insertBefore(newNextNode, newNode.nextElementSibling);\r\n            moveRange(newNode);\r\n        } else if (inNode.node.nodeName == \"DIV\") {\r\n            let olNode = document.createElement(\"ol\");\r\n            olNode.className = \"list-decimal list-inside\";\r\n            let liNode = document.createElement(\"li\");\r\n            let a = inNode.node.childNodes.length;\r\n            for (let i = 0; i < a; i++) {\r\n                let elementaa = inNode.node.childNodes[i].cloneNode(true);\r\n                liNode.appendChild(elementaa);\r\n            }\r\n            olNode.appendChild(liNode);\r\n            editor.insertBefore(olNode, inNode.nextnode);\r\n            editor.removeChild(inNode.node);\r\n\r\n            moveRange(liNode);\r\n        } else if (inNode.node.nodeName == \"#text\") {\r\n            addli(inNode.nextnode);\r\n        } else if (inNode.node.nodeName == \"UL\") {\r\n            //将无序列表变成有序列表\r\n            let olNode = document.createElement(\"ol\");\r\n            olNode.className = \"list-decimal list-inside\";\r\n            console.log(inNode.node.children.length);\r\n            let a = inNode.node.children.length;\r\n            for (let i = 0; i < a; i++) {\r\n                let element = inNode.node.children[i].cloneNode(true);\r\n                console.log(i, element, inNode.node.children.length);\r\n                olNode.appendChild(element);\r\n            }\r\n\r\n            inNode.node.parentNode.replaceChild(olNode, inNode.node);\r\n        }\r\n    }\r\n    function addli(inNode) {\r\n        let olNode = document.createElement(\"ol\");\r\n        olNode.className = \"list-decimal list-inside\";\r\n        let liNode = document.createElement(\"li\");\r\n        olNode.appendChild(liNode);\r\n        if (inNode == null) {\r\n            editor.appendChild(olNode);\r\n        } else {\r\n            editor.insertBefore(olNode, inNode);\r\n        }\r\n        moveRange(liNode);\r\n    }\r\n    function addul(inNode) {\r\n        let olNode = document.createElement(\"ul\");\r\n        olNode.className = \"list-disc list-inside\";\r\n        let liNode = document.createElement(\"li\");\r\n        olNode.appendChild(liNode);\r\n        if (inNode == null) {\r\n            editor.appendChild(olNode);\r\n        } else {\r\n            editor.insertBefore(olNode, inNode);\r\n        }\r\n        moveRange(liNode);\r\n    }\r\n\r\n    function toli(inNode) {}\r\n    function listorder(params) {\r\n        editor.focus();\r\n        let selection = getSelection();\r\n        console.log(\"selection\", selection);\r\n        //判断当前属于div,ol,还是ul\r\n        let inNode = get1LevelNodePosition(selection);\r\n        if (inNode == null || inNode.nextnode == null) {\r\n            addul(null);\r\n        } else if (inNode.node.nodeName == \"UL\") {\r\n            //将无序列表变成普通列表\r\n            let selection = getSelection();\r\n            let cNode = selection.focusNode;\r\n            let targetNode = \"\";\r\n            //获得光标所在的li\r\n            while (true) {\r\n                if (cNode.nodeName == \"LI\") {\r\n                    targetNode = cNode;\r\n                    break;\r\n                } else {\r\n                    cNode = cNode.parentNode;\r\n                }\r\n            }\r\n            let targetIndex = 0;\r\n            let geted = false;\r\n            let newNode = document.createElement(\"div\");\r\n            let newNextNode = document.createElement(\"ul\");\r\n            newNextNode.className = \"list-disc list-inside\";\r\n\r\n            //获得光标所在的li的位置\r\n            for (let index = 0; index < inNode.node.children.length; index++) {\r\n                const element = inNode.node.children[index];\r\n                if (element.isSameNode(targetNode)) {\r\n                    targetIndex = index;\r\n                    geted = true;\r\n                    let a = targetNode.childNodes.length;\r\n                    for (let i = 0; i < a; i++) {\r\n                        let elementaa = targetNode.childNodes[i].cloneNode(\r\n                            true\r\n                        );\r\n                        newNode.appendChild(elementaa);\r\n                    }\r\n                    editor.insertBefore(newNode, inNode.nextnode);\r\n                    continue;\r\n                }\r\n                if (geted) {\r\n                    newNextNode.appendChild(element.cloneNode(true));\r\n                }\r\n            }\r\n            console.log(\"newNextNode\", newNextNode);\r\n            inNode.node.removeChild(targetNode);\r\n            if (inNode.node.childNodes.length == 0) {\r\n                //如果移除后ol内为空,移除这个空的ol\r\n                editor.removeChild(inNode.node);\r\n            } else {\r\n                //移除目标节点后面的li\r\n                let a = newNextNode.childNodes.length;\r\n                for (let i = 0; i < a; i++) {\r\n                    inNode.node.removeChild(inNode.node.lastChild);\r\n                }\r\n            }\r\n            //将目标节点后面的li集中到新的ol中并插入\r\n            editor.insertBefore(newNextNode, newNode.nextElementSibling);\r\n            moveRange(newNode);\r\n        } else if (inNode.node.nodeName == \"DIV\") {\r\n            let olNode = document.createElement(\"ul\");\r\n            olNode.className = \"list-disc list-inside\";\r\n            let liNode = document.createElement(\"li\");\r\n            let a = inNode.node.childNodes.length;\r\n            for (let i = 0; i < a; i++) {\r\n                let elementaa = inNode.node.childNodes[i].cloneNode(true);\r\n                liNode.appendChild(elementaa);\r\n            }\r\n            olNode.appendChild(liNode);\r\n            editor.insertBefore(olNode, inNode.nextnode);\r\n            editor.removeChild(inNode.node);\r\n\r\n            moveRange(liNode);\r\n        } else if (inNode.node.nodeName == \"#text\") {\r\n            addli(inNode.nextnode);\r\n        } else if (inNode.node.nodeName == \"OL\") {\r\n            //将无序列表变成有序列表\r\n            let olNode = document.createElement(\"ul\");\r\n            olNode.className = \"list-disc list-inside\";\r\n            console.log(inNode.node.children.length);\r\n            let a = inNode.node.children.length;\r\n            for (let i = 0; i < a; i++) {\r\n                let element = inNode.node.children[i].cloneNode(true);\r\n                console.log(i, element, inNode.node.children.length);\r\n                olNode.appendChild(element);\r\n            }\r\n\r\n            inNode.node.parentNode.replaceChild(olNode, inNode.node);\r\n        }\r\n    }\r\n    async function bold(params) {\r\n        editor.focus();\r\n    }\r\n    function underline(params) {}\r\n    function picture(params) {}\r\n    function moveRange(liNode) {\r\n        let selection = window.getSelection();\r\n        // 创建新的光标对象\r\n        var range = document.createRange();\r\n        // 光标对象的范围界定为新建的表情节点\r\n        range.selectNodeContents(liNode);\r\n        // 光标位置定位在表情节点的最大长度\r\n        console.log(\"liNode.length\", liNode.length);\r\n        range.setStart(liNode, 0);\r\n        // range.setEnd(liNode, 0);\r\n        // 使光标开始和光标结束重叠\r\n        range.collapse(true);\r\n        // 清除选定对象的所有光标对象\r\n        selection.removeAllRanges();\r\n        // 插入新的光标对象\r\n        selection.collapse(liNode, 0);\r\n        selection.addRange(range);\r\n    }\r\n</script>\r\n\r\n<div class=\"border-gray-200 border-solid border-4 rounded-lg mt-2 p-2\">\r\n    <div\r\n        id=\"msgInputContainer\"\r\n        class=\"msgInputContainer min-h-32 max-h-64   overflow-y-auto overflow-x-hidden focus:outline-none \"\r\n        contenteditable=\"true\"\r\n        bind:this={editor}\r\n        bind:innerHTML={eContent}\r\n    />\r\n    <div class=\" flex justify-between  mt-4\">\r\n        <div id=\"toolbar-container\" class=\"space-x-1\">\r\n            <button class=\"rounded-sm hover:bg-gray-200 p-1 focus:outline-none\"\r\n                ><i class=\"ri-hashtag\" /></button\r\n            >\r\n            <button\r\n                class=\"rounded-sm hover:bg-gray-200 p-1 focus:outline-none\"\r\n                on:click={listcheck}><i class=\"ri-list-check\" /></button\r\n            >\r\n            <button\r\n                class=\"rounded-sm hover:bg-gray-200 p-1\"\r\n                on:click={listorder}><i class=\"ri-list-ordered\" /></button\r\n            >\r\n            <button class=\"rounded-sm hover:bg-gray-200 p-1\" on:click={bold}\r\n                ><i class=\"ri-bold\" /></button\r\n            >\r\n            <button class=\"rounded-sm hover:bg-gray-200 p-1\"\r\n                ><i class=\"ri-underline\" /></button\r\n            >\r\n            <button class=\"rounded-sm hover:bg-gray-200 p-1\"\r\n                ><i class=\"ri-image-2-line\" /></button\r\n            >\r\n        </div>\r\n    </div>\r\n    <div>{eContent}</div>\r\n</div>\r\n\r\n<style>div#msgInputContainer:empty:before{content:\"123\"}\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AA2TO,GAAG,gCAAkB,MAAM,OAAO,CAAC,QAAQ,KAAK,CAAC"
}